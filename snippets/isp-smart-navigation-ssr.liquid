<!---
Auto-generated by Fast Simon.
DO NOT EDIT this as this file can be re-written at any time.
--->
<style>
    #shopify-section-footer {
        display: none;
    }
</style>





<script>var CATEGORY_ID = "{{ collection.id }}" </script>




<script>
    var FAST_SIMON_STORE_ID = "92925559060";
</script>



<script>
    const createHTMLDocument=()=>document.implementation.createHTMLDocument("");let createDocument=(e,t)=>{const n=createHTMLDocument();return n.write("<script" + ">"),(createDocument=n.scripts.length?createHTMLDocument:(e,t)=>{const n=document.createElement("iframe");n.src="",n.style.display="none",e.insertBefore(n,t);const r=n.contentDocument,{close:o}=r;return r.close=(()=>{e.removeChild(n),o.call(r)}),r})(e,t)};function writableDOM(e,t){if(this instanceof writableDOM)return new WritableStream(writableDOM(e,t));const n=t?t.nextSibling:null,r=createDocument(e,n);r.write("<!DOCTYPE html><body><template>");const o=r.body.firstChild.content,i=r.createTreeWalker(o),c=new WeakMap([[o,e]]);let a,l=null,s=null,d=!1,m=null;return{write(t){r.write(t),l&&!m&&(c.get(l).data=l.data),function t(){let r;if(d){const t=i.currentNode;for(s&&(i.currentNode=s);r=i.nextNode();){const t=getPreloadLink(s=r);t&&(t.onload=t.onerror=(()=>e.removeChild(t)),e.insertBefore(t,n))}i.currentNode=t}else{for(;r=i.nextNode();){const o=document.importNode(r,!1),i=l;r.nodeType===Node.TEXT_NODE?l=r:(l=null,isBlocking(o)&&(d=!1,o.parentNode&&t()));const a=c.get(r.parentNode);if(c.set(r,o),isInlineHost(a)?m=a:(appendInlineTextIfNeeded(i,m),m=null,a===e?e.insertBefore(o,n):a.appendChild(o)),d)return t()}a&&a()}}()},abort(){d&&c.get(i.currentNode).remove()},close:()=>(appendInlineTextIfNeeded(l,m),d?new Promise(e=>a=e):Promise.resolve())}}function isBlocking(e){return e.nodeType===Node.ELEMENT_NODE&&("SCRIPT"===e.tagName&&e.src&&!(e.noModule||"module"===e.type||e.hasAttribute("async")||e.hasAttribute("defer"))||"LINK"===e.tagName&&"stylesheet"===e.rel&&(!e.media||matchMedia(e.media).matches))}function getPreloadLink(e){let t;if(e.nodeType===Node.ELEMENT_NODE){switch(e.tagName){case"SCRIPT":e.src&&!e.noModule&&((t=document.createElement("link")).href=e.src,"module"===e.getAttribute("type")?t.rel="modulepreload":(t.rel="preload",t.as="script"));break;case"LINK":"stylesheet"!==e.rel||e.media&&!matchMedia(e.media).matches||((t=document.createElement("link")).href=e.href,t.rel="preload",t.as="style");break;case"IMG":(t=document.createElement("link")).rel="preload",t.as="image",e.srcset?(t.imageSrcset=e.srcset,t.imageSizes=e.sizes):t.href=e.src}t&&(e.integrity&&(t.integrity=e.integrity),e.crossOrigin&&(t.crossOrigin=e.crossOrigin))}return t}function appendInlineTextIfNeeded(e,t){e&&t&&t.appendChild(e)}function isInlineHost(e){const{tagName:t}=e;return"SCRIPT"===t&&!e.src||"STYLE"===t}
</script>

<script>
    (() => {
        var fastSimonCollectionPersonalizationConfig = '{"active": false, "avoidProducts": null, "avoidCategories": [], "disableCategories": [], "recencyLimit": 5, "maxRecencyLimit": 365}';
        if(fastSimonCollectionPersonalizationConfig) {
            fastSimonCollectionPersonalizationConfig = JSON.parse(fastSimonCollectionPersonalizationConfig);
        }
        var fastSimonSearchPersonalizationActive = 'false';
        if(fastSimonSearchPersonalizationActive) {
            fastSimonSearchPersonalizationActive = JSON.parse(fastSimonSearchPersonalizationActive);
        }
        function isCollectionPersonalization(categoryId, personalizationSettings) {
            let isPersonalization = true;
            if(!personalizationSettings || (typeof personalizationSettings?.active === 'undefined')) {
                isPersonalization = false;
            } else if(!personalizationSettings.active) {
                isPersonalization = false;
            } else if(personalizationSettings.avoidCategories.includes(categoryId)) {
                isPersonalization = false;
            } else if(personalizationSettings.disableCategories.includes(categoryId)) {
                isPersonalization = false;
            }
            return isPersonalization;
        }

        function filter(products, fromTime, productsToExclude) {
            const curSeconds = Math.round(new Date().getTime() / 1000);
            if(productsToExclude) {
                products = products.filter(p => !productsToExclude.includes(String(p[0])))
            }
            return products.sort((a,b) => b[1] < a[1] ? 1 : -1).filter(product => curSeconds - product[1] <= fromTime);
        }

        function getRecentProducts(minProducts, maxProducts, fromTime, productsToExclude){
            const recent = JSON.parse(localStorage.getItem("ISP_PRODUCTS_VIEWED_SESSION_2") || '[]');
            const products = filter(recent, fromTime, productsToExclude).slice(0, maxProducts);
            const parsedIds = Array.from((new Set(products.map(p => p[0])))).map(pid => String(pid)).join(',');
            return parsedIds && products.length >= minProducts ? parsedIds : undefined;
        }

        function getSessionToken(hasSessionProducts) {
            const token = localStorage.getItem('isp_token_1');
            return hasSessionProducts && token ? token : undefined;
        }

        function getPersonalizationParams(purpose) {
            var sp;
            if(purpose === 'search' && fastSimonSearchPersonalizationActive) {
                sp = getRecentProducts(3, 50, 5 * 60 * 60 * 24);
            } else if(purpose === 'category' && fastSimonCollectionPersonalizationConfig?.active) {
                sp = getRecentProducts(1, 10, (fastSimonCollectionPersonalizationConfig?.recencyLimit || fastSimonCollectionPersonalizationConfig?.maxRecencyLimit || 365) * 60 * 60 * 24, fastSimonCollectionPersonalizationConfig?.avoidProducts);
            }
            var st = getSessionToken(!!sp);
            return st && sp ? {st:st, sp: sp} : undefined;
        }

        window.fastSimonUtils = window.fastSimonUtils || {};
        window.fastSimonUtils = {
            ...window.fastSimonUtils,
            isCollectionPersonalization: isCollectionPersonalization,
            getRecentProducts: getRecentProducts,
            getSessionToken: getSessionToken,
            getPersonalizationParams: getPersonalizationParams
        }
    })();
</script>

<script>
  function fsGetUserVariation() {
      const variationId = localStorage.getItem("fast-debug-variation") || localStorage.getItem("fast-variation") || undefined;
      return variationId?.split(':')?.[1];
  }

  function getUserLocation(uuid) {
    const key = 'isp_location_' + uuid;
    return localStorage.getItem(key) || undefined;
  }

</script>

<!-- Initialize request parameters for Fast Simon integration -->
<script class="fast-simon-script">
    var infiniteScroll = "";
    var productsPerPageMobile = "10" || '10';
    var productsPerPageDesktop = "15" || '20';
    var isMobile = window.matchMedia("(max-width: 767px)")?.matches;
    var device = isMobile ? 'mobile' : 'desktop';
    var isMainTheme = window?.Shopify ? (!Shopify?.theme?.role || Shopify.theme.role === 'main') : true;
    var fsVariationID = fsGetUserVariation();
    var hasShopifyMarkets = "False" === "True";
    var fastRequestParams = new URLSearchParams({
        uuid: "17b255ab-b1f2-4165-8d95-297687630252",
        store_id: window.FAST_SIMON_STORE_ID || "92925559060",
    });
    // Append category_id if available
    if(window.CATEGORY_ID) {
        fastRequestParams.append('category_id', window.CATEGORY_ID);
    }

    // Append additional parameters from URL search params
    var urlSearchParams = new URLSearchParams(location.search);
    fastRequestParams.append('page', urlSearchParams.get('page') || '1');
    fastRequestParams.append('device', device);
    fastRequestParams.append('products_per_page', device === 'mobile' ? productsPerPageMobile : productsPerPageDesktop);
    if(urlSearchParams.get('filters')) {
        fastRequestParams.append('filters', urlSearchParams.get('filters'));
    }
    if(urlSearchParams.get('sort')) {
        fastRequestParams.append('sort', urlSearchParams.get('sort'));
    }
    if(urlSearchParams.get('q')) {
        fastRequestParams.append('q', urlSearchParams.get('q'));
    }
    if(infiniteScroll && infiniteScroll !== '0') {
        fastRequestParams.append('infinite_scroll', 'true');
    }
    if(hasShopifyMarkets && window.Shopify?.country) {
        fastRequestParams.append('market_context', window.Shopify?.country);
        if(window.Shopify.currency.active) {
            fastRequestParams.append('active_currency', window.Shopify.currency.active);
        }
    }
    if(fsVariationID) {
      fastRequestParams.append('variation_id', fsVariationID);
    }
    if(!isMainTheme) {
        fastRequestParams.append('unpublished', 'true');
    }
    if(urlSearchParams.get('lp')) {
        fastRequestParams.append('lp', urlSearchParams.get('lp'));
    }
    if(getUserLocation(fastRequestParams.get('uuid'))) {
        fastRequestParams.append('location', getUserLocation(fastRequestParams.get('uuid')));
    }
    const fsPersonalizationParams = window.fastSimonUtils?.getPersonalizationParams(window.CATEGORY_ID ? 'category' : urlSearchParams.get('q') ? 'search' : undefined);
    if(fsPersonalizationParams) {
        fastRequestParams.append('sp', fsPersonalizationParams.sp);
        fastRequestParams.append('st', fsPersonalizationParams.st);
        window.fastSimonIsDynamic = true;
    }
    // Finalize the request URL
    window.fastRequestParams = fastRequestParams;
    window.fastHref = "https://ssr-grid.fastsimon.com?"+fastRequestParams.toString();

</script>

<!-- App css -->
<style id="fast-serp-css" media="not all"></style>
<!-- Editor custom css -->
<style id="fast-serp-custom-css" media="not all">None</style>

<script>
  if(!fsGetUserVariation()) {
    ['fast-serp-css', 'fast-serp-custom-css'].forEach(id => {
      document.getElementById(id).media = '';
    });
  }
</script>



<!-- App element target -->
<div id="fast-simon-serp-app" style="display:block;color: initial;background: initial; min-height: 100vh;">
    
</div>

<script>
    if(window.fastSimonIsDynamic) {
        document.getElementById('fast-simon-serp-app').innerHTML = '';
        document.getElementById('fast-simon-hide-mf-render')?.remove();
    }
</script>

<script>
    (() => {
        var isAppHydrated = !!localStorage.getItem('fs-hydrated');
        var shouldImmediateHydrate = isAppHydrated || window.matchMedia("(min-width: 767px)")?.matches;

        // Injects a modified script into the target element
        function injectScript(script, target) {
            target.appendChild(script);
        }

        function prepareScript(script) {
            if(script.type === 'application/json') {
                return script;
            }
            let newScript = document.createElement('script');
            newScript.text = script.text;
            return newScript
        }
        // Injects scripts on user interaction to improve performance
        function injectOnUserInteraction(scripts, target) {

            function inject(e) {

                e.target.removeEventListener(e.type, inject); // Cleanup

                /* verify that the script not injected already by another interaction event */
                if(!window.FSHydrated) {
                    window.FSHydrated = true;
                    if(window.HTMLToInject) {
                        target.innerHTML = window.HTMLToInject;
                    }
                    scripts.forEach(script => injectScript(script, target));

                }

            }

            // Listen for any user interaction
            const interactionEvents = ['mousedown', 'mousemove', 'touchstart', 'keydown', 'scroll'];

            /* inject AC on any interaction and destroy once fired */
            for (const eventName of interactionEvents) {
                window.addEventListener(eventName, inject);
            }
        }
        // Decide on script injection based on local storage flag
        function injectScripts(scripts, target) {
            if(shouldImmediateHydrate) {
                scripts.forEach(script => injectScript(script, target));
            } else {
                injectOnUserInteraction(scripts, target);
            }
            localStorage.setItem('fs-hydrated', 'true');
        }

        // Adjusts the min-height of the app dynamically
        function disableMinHeight(){
            let serpElement = document.getElementById('fast-simon-serp-app');
            if(serpElement) {
                serpElement.style.minHeight = 'unset';
            }
        }

        // Show footer after the app is loaded
        function showFooter() {
            let footer = document.getElementById('shopify-section-footer');
            if(footer) {
                footer.style.display = 'block';
            }
        }

        if (window.SerpOptions) {
            setTimeout(disableMinHeight, 300);
            setTimeout(showFooter, 300);
        } else {
            window.addEventListener('fast-serp-ready', function () {
                setTimeout(disableMinHeight, 300);
                setTimeout(showFooter, 300);
            });
        }

        var allHTML = '';
        async function doFetch() {
            var res = await fetch(window.fastHref, {priority: 'high'});
            var targetEl = document.getElementById('fast-simon-serp-app');

            const transformer = new TransformStream({
                transform(chunk, controller) {
                    allHTML += chunk;
                    chunk = chunk.replaceAll('<script', '<!--<script');
                    //enqueue the chunk so it can be passed on.
                    controller.enqueue(chunk);
                }
            });

            if(window.collection_prerendered && !window.fastSimonIsDynamic) {
                var data = await res.text();
                window.HTMLToInject = data.replaceAll('<script', '<!--<script');
                allHTML = data;
                shouldImmediateHydrate = isAppHydrated;
            } else if(shouldImmediateHydrate) {
                await res.body
                    .pipeThrough(new TextDecoderStream()) // Decode the stream from bytes to text.
                    .pipeTo(new writableDOM(targetEl)); // Continue the original pipeTo to DOM element.
            } else { // hydrate on interaction
                await res.body
                    .pipeThrough(new TextDecoderStream())
                    .pipeThrough(transformer)
                    .pipeTo(new writableDOM(targetEl));
            }
        }

        doFetch().then(() => {
            let splatted = allHTML.split('<script');
            splatted.shift(1);
            splatted = splatted.map(item => '<script' + item);
            let scriptsParent = document.createElement('div');
            scriptsParent.innerHTML = splatted.join('\n');
            let scripts = [...scriptsParent.querySelectorAll('script')].map(script => prepareScript(script));

            injectScripts(scripts, document.getElementById('fs-serp-app'));
        });
    })();

</script>